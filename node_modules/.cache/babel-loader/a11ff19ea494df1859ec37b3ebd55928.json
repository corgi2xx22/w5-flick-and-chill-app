{"ast":null,"code":"import axios from 'axios';\nimport queryString from 'query-string';\nimport apiConfig from './apiConfig';\nconst axiosClient = axios.create({\n  baseURL: apiConfig.baseUrl,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  paramsSerializer: params => queryString.stringify({ ...params,\n    api_key: apiConfig.apiKey\n  })\n});\naxiosClient.interceptors.request.use(async config => config);\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, error => {\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["/Users/hellentrinh/Desktop/github-movie-app/tutorial/react-movie/src/api/axiosClient.js"],"names":["axios","queryString","apiConfig","axiosClient","create","baseURL","baseUrl","headers","paramsSerializer","params","stringify","api_key","apiKey","interceptors","request","use","config","response","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,WAAW,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEH,SAAS,CAACI,OADU;AAE7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFoB;AAK7BC,EAAAA,gBAAgB,EAAEC,MAAM,IAAIR,WAAW,CAACS,SAAZ,CAAsB,EAAC,GAAGD,MAAJ;AAAYE,IAAAA,OAAO,EAAET,SAAS,CAACU;AAA/B,GAAtB;AALC,CAAb,CAApB;AAQAT,WAAW,CAACU,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkBA,MAAvD;AAEAb,WAAW,CAACU,YAAZ,CAAyBI,QAAzB,CAAkCF,GAAlC,CAAuCE,QAAD,IAAc;AAChD,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3B,WAAOD,QAAQ,CAACC,IAAhB;AACH;;AAED,SAAOD,QAAP;AACH,CAND,EAMIE,KAAD,IAAW;AACV,QAAMA,KAAN;AACH,CARD;AAUA,eAAehB,WAAf","sourcesContent":["import axios from 'axios';\nimport queryString from 'query-string';\n\nimport apiConfig from './apiConfig';\n\nconst axiosClient = axios.create({\n    baseURL: apiConfig.baseUrl,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    paramsSerializer: params => queryString.stringify({...params, api_key: apiConfig.apiKey})\n});\n\naxiosClient.interceptors.request.use(async (config) => config);\n\naxiosClient.interceptors.response.use((response) => {\n    if (response && response.data) {\n        return response.data;\n    }\n\n    return response;\n}, (error) => {\n    throw error;\n});\n\nexport default axiosClient;"]},"metadata":{},"sourceType":"module"}